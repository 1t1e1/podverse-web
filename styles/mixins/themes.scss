$themes: (
  'dark': (
    'backgroundPrimary': $ink,
    'backgroundSecondary': $velvet,
    'backgroundTertiary': $black,
    'backgroundOpaque': $blueBrightOpaque,
    'backgroundTransparent': $blueDarkBlueGreyTransparent,

    'borderPrimary': $blueDarkText,
    'borderActive': $blueBright,

    'buttonPrimaryBackground': $blueDarkText,
    'buttonPrimaryBackgroundRollover': $blueDarkTextLighter,
    'buttonPrimaryText': $black,
    'buttonSecondaryBackground': $blueDarkSlate,
    'buttonSecondaryBackgroundRollover': $blueDarkSlateLighter,
    'buttonSecondaryText': $white,
    'buttonTertiaryBackground': $blueBrightOpaqueLighter,
    'buttonTertiaryBackgroundRollover': $blueDarkText,
    'buttonTertiaryText': $white,
    'buttonTertiaryTextRollover': $black,
    'buttonTertiaryBorder': $blueDarkText,

    'divider': $whiteOpaque,

    'dropdownMenu': $blueDarkBlueGrey,
    'dropdownMenuSelected': $whiteOpaque,

    'headerGradientLight': $blueLightNavyLight,
    'headerGradientDark': $blueDarkBlueGrey,

    'highlighted': $whiteOpaque,
    
    'navBackground': '#f00',

    'navItemActiveGradientLight': $blueDusky,
    'navItemActiveGradientDark': $blueDarkSlate,

    'paginationActiveBackground': $blueBrightOpaqueLighter,
    'paginationActiveBorder': $blueDarkText,
    'paginationActiveText': $white,
    'paginationInactiveBackground': $blueBrightOpaqueLighter,
    'paginationInactiveBorder': $grayLight,
    'paginationInactiveText': $grayLight,

    'sliderClipIndicator': $blueDarkText,
    'sliderHighlightSection': $blueDarkTextTransparent,
    'sliderListened': $white,
    'sliderRemaining': $blueDarkSlate,

    'tabBorderActive': $blueBright,

    'textPrimary': $white,
    'textSecondary': $grayLight,
    'textTertiary': $perrywinkle,
    'textQuaternary': $blueDarkText
  ),
  'light': ()
);

/**
* Code created by Joshua Tzucker
* https://joshuatz.com/posts/2019/coding-a-css-theme-switcher-a-multitude-of-web-dev-options/#method-b
* 
* Mixin to use to generate blocks for each theme
* Automatically takes @content
*/
$scopedTheme: null;
@mixin themeGen($allThemesMap: $themes) {
    @each $themeName, $themeMap in $allThemesMap {
        .theme-#{$themeName} & {
            // Creating a map that contains values specific to theme.
            // Global is necessary since in mixin
            $scopedTheme: () !global;
            @each $variableName, $variableValue in $themeMap {
                // Merge each key-value pair into the theme specific map
                $scopedTheme: map-merge($scopedTheme, ($variableName: $variableValue)) !global;
            }
            // The original content passed
            @content;
            // Unset
            $scopedTheme: null !global;
        }
    }
}
/**
* Function to call within themeGen mixin, to get value from the current theme in the iterator
*/
@function getThemeVal($themeVar){
    @return map-get($scopedTheme,$themeVar);
}
