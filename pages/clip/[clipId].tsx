import { GetServerSideProps } from 'next'
import Head from 'next/head'
import { useTranslation } from 'next-i18next'
import { serverSideTranslations } from 'next-i18next/serverSideTranslations'
import type { Episode, MediaRef } from 'podverse-shared'
import { useEffect, useState } from 'react'
import {
  EpisodeInfo, List, MediaRefListItem, PageHeader, PageScrollableContent,
  Pagination, PodcastPageHeader
} from '~/components'
import { scrollToTopOfPageScrollableContent } from '~/components/PageScrollableContent/PageScrollableContent'
import { calcListPageCount, getMediaRefTitle } from '~/lib/utility/misc'
import { Page } from '~/lib/utility/page'
import { PV } from '~/resources'
import { getMediaRefById, getMediaRefsByQuery } from '~/services/mediaRef'
import { getServerSideAuthenticatedUserInfo } from '~/services/auth'

interface ServerProps extends Page {
  serverClips: MediaRef[]
  serverClipsFilterPage: number
  serverClipsFilterSort: string
  serverClipsPageCount: number
  serverMediaRef: MediaRef
}

type FilterState = {
  clipsFilterPage?: number
  clipsFilterSort?: string
}

const keyPrefix = 'pages_clip'

export default function Clip(props: ServerProps) {
  const { serverClips, serverClipsPageCount, serverClipsFilterPage,
    serverClipsFilterSort, serverMediaRef } = props
  const { episode } = serverMediaRef
  const { podcast } = episode

  const { t } = useTranslation()

  const [filterState, setFilterState] = useState({
    clipsFilterPage: serverClipsFilterPage,
    clipsFilterSort: serverClipsFilterSort
  } as FilterState)
  const { clipsFilterPage, clipsFilterSort } = filterState
  const [clipsListData, setClipsListData] = useState<MediaRef[]>(serverClips)
  const [clipsPageCount, setClipsPageCount] = useState<number>(serverClipsPageCount)

  const pageTitle = getMediaRefTitle(t, serverMediaRef, episode)

  useEffect(() => {
    (async () => {
      const { data } = await clientQueryClips(
        { page: clipsFilterPage, episodeId: episode.id, sort: clipsFilterSort },
        filterState
      )
      const [newMediaRefsListData, newMediaRefsListCount] = data
      setClipsListData(newMediaRefsListData)
      setClipsPageCount(calcListPageCount(newMediaRefsListCount))
      scrollToTopOfPageScrollableContent()
    })()
  }, [clipsFilterPage, clipsFilterSort])

  return (
    <>
      <Head>
        <title>{pageTitle}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PodcastPageHeader
        episode={episode}
        podcast={podcast} />
      <PageScrollableContent>
        <div className='row'>
          <div className='column flex-stretch'>
            <EpisodeInfo episode={episode} />
            <PageHeader
              isSubHeader
              sortOnChange={(selectedItems: any[]) => {
                const selectedItem = selectedItems[0]
                setFilterState({ clipsFilterPage: 1, clipsFilterSort: selectedItem.key })
              }}
              sortOptions={generateSortOptions(t)}
              sortSelected={clipsFilterSort}
              text={t('Clips')} />
            <List>
              {generateMediaRefListElements(clipsListData, episode)}
            </List>
            <Pagination
              currentPageIndex={clipsFilterPage}
              handlePageNavigate={(newPage) => {
                setFilterState({ clipsFilterPage: newPage, clipsFilterSort })
              }}
              handlePageNext={() => {
                const newPage = clipsFilterPage + 1
                if (newPage <= clipsPageCount) {
                  setFilterState({ clipsFilterPage: newPage, clipsFilterSort })
                }
              }}
              handlePagePrevious={() => {
                const newPage = clipsFilterPage - 1
                if (newPage > 0) {
                  setFilterState({ clipsFilterPage: newPage, clipsFilterSort })
                }
              }}
              pageCount={clipsPageCount} />
          </div>
        </div>
      </PageScrollableContent>
    </>
  )
}

/* Client-Side Queries */

type ClientQueryClips = {
  episodeId?: string
  page?: number
  sort?: string
}

const clientQueryClips = async (
  { episodeId, page, sort }: ClientQueryClips,
  filterState: FilterState
) => {
  const finalQuery = {
    episodeId,
    ...(page ? { page } : { page: filterState.clipsFilterPage }),
    ...(sort ? { sort } : { sort: filterState.clipsFilterSort })
  }
  return getMediaRefsByQuery(finalQuery)
}

/* Render Helpers */

const generateSortOptions = (t: any) => [
  { label: t('Chronological'), key: PV.Filters.sort._chronological },
  { label: t('Recent'), key: PV.Filters.sort._mostRecent },
  { label: t('Top - Past Day'), key: PV.Filters.sort._topPastDay },
  { label: t('Top - Past Week'), key: PV.Filters.sort._topPastWeek },
  { label: t('Top - Past Month'), key: PV.Filters.sort._topPastMonth },
  { label: t('Top - Past Year'), key: PV.Filters.sort._topPastYear },
  { label: t('Top - All Time'), key: PV.Filters.sort._topAllTime },
  { label: t('Oldest'), key: PV.Filters.sort._oldest },
  { label: t('Random'), key: PV.Filters.sort._random }
]

const generateMediaRefListElements = (listItems: MediaRef[], episode: Episode) => {
  return listItems.map((listItem, index) => {
    listItem.episode = episode
    return (
      <MediaRefListItem
        mediaRef={listItem}
        podcast={episode.podcast}
        key={`${keyPrefix}-${index}`} />
    )
  })
}

/* Server-Side Logic */

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { locale, params, req } = ctx
  const { cookies } = req
  const { clipId } = params

  const userInfo = await getServerSideAuthenticatedUserInfo(cookies)

  const mediaRefResponse = await getMediaRefById(clipId)
  const serverMediaRef = mediaRefResponse.data
  const { episode } = serverMediaRef

  const serverClipsFilterSort = PV.Filters.sort._topPastYear
  const serverClipsFilterPage = 1

  const clipsResponse = await getMediaRefsByQuery({
    episodeId: episode.id,
    sort: serverClipsFilterSort
  })
  const [clipsListData, clipsListDataCount] = clipsResponse.data
  const serverClips = clipsListData
  const serverClipsPageCount = calcListPageCount(clipsListDataCount)

  const props: ServerProps = {
    serverUserInfo: userInfo,
    ...(await serverSideTranslations(locale, PV.i18n.fileNames.all)),
    serverCookies: cookies,
    serverClips,
    serverClipsFilterPage,
    serverClipsFilterSort,
    serverClipsPageCount,
    serverMediaRef
  }

  return { props }
}
