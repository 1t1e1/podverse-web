import { GetServerSideProps } from 'next'
import Head from 'next/head'
import { useTranslation } from 'next-i18next'
import { serverSideTranslations } from 'next-i18next/serverSideTranslations'
import type { Episode, MediaRef, NowPlayingItem, Playlist } from 'podverse-shared'
import { convertNowPlayingItemToEpisode, convertNowPlayingItemToMediaRef } from 'podverse-shared'
import { useState } from 'react'
import { ClipListItem, ColumnsWrapper, EpisodeListItem, List, PageScrollableContent,
  PlaylistPageHeader, SideContent } from '~/components'
import { PV } from '~/resources'
import { getServerSideAuthenticatedUserInfo } from '~/services/auth'
import { Page } from '~/lib/utility/page'
import { getServerSideUserQueueItems } from '~/services/userQueueItem'
import { combineAndSortPlaylistItems, getPlaylist } from '~/services/playlist'

interface ServerProps extends Page {
  serverPlaylist: Playlist
  serverPlaylistSortedItems: [Episode | MediaRef]
}

const keyPrefix = 'pages_playlist'

export default function Playlist({ serverPlaylist, serverPlaylistSortedItems }: ServerProps) {
  const { t } = useTranslation()
  const [isEditing, setIsEditing] = useState<boolean>(false)
  const pageTitle = serverPlaylist.title || t('untitledPlaylist')

  /* Render Helpers */

  const generatePlaylistItemElements = (playlistItems: [Episode | MediaRef]) => {
    return playlistItems.map((playlistItem, index) => {
      if (!playlistItem.pubDate) {
        const mediaRef = playlistItem
        return (
          <ClipListItem
            episode={mediaRef.episode}
            handleRemove={() => console.log('remove clip')}
            key={`${keyPrefix}-clip-${index}`}
            mediaRef={mediaRef}
            /* *TODO* Remove the "as any" below without throwing a Typescript error */
            podcast={mediaRef.episode.podcast as any}
            showImage
            showRemoveButton={isEditing} />
        )
      } else {
        const episode = playlistItem
        return (
          <EpisodeListItem
            episode={episode}
            handleRemove={() => console.log('remove episode')}
            key={`${keyPrefix}-episode-${index}`}
            /* *TODO* Remove the "as any" below without throwing a Typescript error */
            podcast={episode.podcast as any}
            showImage
            showRemoveButton={isEditing} />
        )
      }
    })
  }

  const _handleStartEditing = () => {
    setIsEditing(true)
  }

  const _handleStopEditing = () => {
    setIsEditing(false)
  }

  return (
    <>
      <Head>
        <title>{pageTitle}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PlaylistPageHeader
        handleStartEditing={_handleStartEditing}
        handleStopEditing={_handleStopEditing}
        isEditing={isEditing}
        playlist={serverPlaylist} />
      <PageScrollableContent>
        <ColumnsWrapper
          mainColumnChildren={
            <>
              <List>
                {generatePlaylistItemElements(serverPlaylistSortedItems)}
              </List>
            </>
          }
        />
      </PageScrollableContent>
    </>
  )
}

/* Server-Side Logic */

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { locale, params, req } = ctx
  const { cookies } = req
  const { playlistId } = params

  const userInfo = await getServerSideAuthenticatedUserInfo(cookies)
  const userQueueItems = await getServerSideUserQueueItems(cookies)

  const playlist = await getPlaylist(playlistId as string)

  const sortedPlaylistItems = combineAndSortPlaylistItems(playlist.episodes,
    playlist.mediaRefs, playlist.itemsOrder) as any

  const serverProps: ServerProps = {
    serverUserInfo: userInfo,
    serverUserQueueItems: userQueueItems,
    ...(await serverSideTranslations(locale, PV.i18n.fileNames.all)),
    serverCookies: cookies,
    serverPlaylist: playlist,
    serverPlaylistSortedItems: sortedPlaylistItems
  }

  return {
    props: serverProps
  }
}
