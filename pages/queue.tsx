import { GetServerSideProps } from 'next'
import Head from 'next/head'
import { useRouter } from 'next/router'
import { useTranslation } from 'next-i18next'
import { serverSideTranslations } from 'next-i18next/serverSideTranslations'
import OmniAural, { useOmniAural } from 'omniaural'
import { convertNowPlayingItemToEpisode, convertNowPlayingItemToMediaRef, NowPlayingItem } from 'podverse-shared'
import { ClipListItem, EpisodeListItem, List, PageHeader, PageScrollableContent, SideContent
  } from '~/components'
import { Page } from '~/lib/utility/page'
import { PV } from '~/resources'
import { getServerSideAuthenticatedUserInfo } from '~/services/auth'
import { getServerSideUserQueueItems } from '~/services/userQueueItem'

interface ServerProps extends Page {}

const keyPrefix = 'pages_queue'

export default function Queue(props: ServerProps) {

  /* Initialize */

  const { t } = useTranslation()
  const [userInfo] = useOmniAural('session.userInfo')
  const [userQueueItems] = useOmniAural('userQueueItems')
  const pageTitle = t('Queue')

  /* Render Helpers */

  const generateQueueListElements = (queueItems: NowPlayingItem[]) => {
    return queueItems.map((queueItem, index) => {
      if (queueItem.clipId) {
        const mediaRef = convertNowPlayingItemToMediaRef(queueItem)
        return (
          <ClipListItem
            episode={mediaRef.episode}
            key={`${keyPrefix}-clip-${index}`}
            mediaRef={mediaRef}
            /* *TODO* Remove the "as any" below without throwing a Typescript error */
            podcast={mediaRef.episode.podcast as any}
            showImage />
        )
      } else {
        const episode = convertNowPlayingItemToEpisode(queueItem)
        return (
          <EpisodeListItem
            episode={episode}
            key={`${keyPrefix}-episode-${index}`}
            /* *TODO* Remove the "as any" below without throwing a Typescript error */
            podcast={episode.podcast as any}
            showImage />
        )
      }
    })
  }

  return (
    <>
      <Head>
        <title>{pageTitle}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageHeader
        text={t('Queue')} />
      <PageScrollableContent noMarginTop>
        <div className='row'>
          <div className='column flex-stretch'>
            <List>
              {generateQueueListElements(userQueueItems)}
            </List>
          </div>
          <div className='column'>
            <SideContent />
          </div>
        </div>
        {/* <Pagination
          currentPageIndex={filterPage}
          handlePageNavigate={(newPage) => setFilterPage(newPage)}
          handlePageNext={() => {
            const newPage = filterPage + 1
            if (newPage <= pageCount) setFilterPage(newPage)
          }}
          handlePagePrevious={() => {
            const newPage = filterPage - 1
            if (newPage > 0) setFilterPage(newPage)
          }}
          pageCount={pageCount} /> */}
      </PageScrollableContent>
    </>
  )
}

/* Server-Side Logic */

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { req, locale } = ctx
  const { cookies } = req

  const userInfo = await getServerSideAuthenticatedUserInfo(cookies)
  const userQueueItems = await getServerSideUserQueueItems(cookies)

  const serverProps: ServerProps = {
    serverUserInfo: userInfo,
    serverUserQueueItems: userQueueItems,
    ...(await serverSideTranslations(locale, PV.i18n.fileNames.all)),
    serverCookies: cookies
  }

  return { props: serverProps }
}
